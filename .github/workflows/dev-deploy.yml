######################################################################################################################
# APP Docker builder and Deployer
# For pushes to main branch

# * Builds and pushes docker image on given "infrastructure" ECR repository
# * If successfull adds a commit to infrastructure git repository changing tag name (or given IMAGE_TAG_VARNAME value)
# * that triggers a new deployment of the service with newly build docker image

# Currently container tag is set to env.RELEASE_VERSION , TBD if it will be Commit hash or any other means

######################################################################################################################
name: Deploy frontend to dev
on:
  push:
    branches: ["new-dashboard"]
  pull_request:
env:
  GRUNTWORK_INSTALLER_VERSION: v0.0.38
  MODULE_CI_VERSION: v0.41.1
  MODULE_SECURITY_VERSION: v0.61.0
  # Disables the use of the Amazon EC2 instance metadata service (IMDS).
  # Forces the AWS CLI to use the env vars defined above for credentials.
  AWS_EC2_METADATA_DISABLED: true
  AWS_ENVIRONMENT: us-east-1

  # AWS Account ID of the account that owns the ECR repo (infra shared account).
  SHARED_SERVICES_ACCOUNT_ID: "646105116760"
  # Following Used by deploying to infrastructure
  # The branch to use when committing to infrastructure-live.
  DEFAULT_INFRA_LIVE_BRANCH: "main"
  # Infra git repo must be in ssh form.
  INFRASTRUCTURE_REPO_SSH: "git@github.com:coqui-ai/MLOpsInfrastructure.git"
  # value of this variable will be changed with TAG of this docker image  built (usually git branch name)
  IMAGE_TAG_VARNAME: "tag"
  # Root URL of backend that website will communicate with
  GATSBY_BACKEND_URL: https://creator-app.dev-coqui.com
  # ECR repository must exist
  ECR_REPO_URL: "646105116760.dkr.ecr.us-east-1.amazonaws.com/website-frontend-images"
  # GHCR repository to mirror to
  GHCR_REPO_URL: "ghcr.io/coqui-ai/website-frontend"
jobs:
  build_and_deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set Release version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "RELEASE_VERSION=dev" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          fi

      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Set custom ref variables
        id: ref
        run: |
          echo "::set-output name=source_ref::$(./.github/scripts/source-ref.sh)"
          echo "::set-output name=short_ref::${GITHUB_REF#refs/*/}"
        shell: bash

      - name: Install utilities
        run: ./_ci/scripts/install.sh
        shell: bash
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.INFRA_DEPLOYER_GITHUB_TOKEN }}

      - name: Build Docker image
        id: build-docker
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.INFRA_SHARED_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.INFRA_SHARED_AWS_SECRET_ACCESS_KEY }}
        run: |
          set -xe

          # Pull latest version to speed up build
          docker pull "${GHCR_REPO_URL}:${{ env.RELEASE_VERSION }}-latest" || true

          # Build and push to ECR
          docker build -f docker/static-serve.dockerfile . --build-arg GATSBY_BACKEND_URL --build-arg REACT_APP_GITHUB_KEY=${{ secrets.GITHUB_TOKEN }} -t "${ECR_REPO_URL}:${{ env.RELEASE_VERSION }}-${{ github.sha }}"
          aws ecr get-login-password --region "${AWS_ENVIRONMENT}" | docker login --username AWS --password-stdin "${ECR_REPO_URL}"
          docker push "${ECR_REPO_URL}:${{ env.RELEASE_VERSION }}-${{ github.sha }}"

          # Mirror image to GHCR for convenience
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login --username ${{ github.actor }} --password-stdin ghcr.io
          docker tag "${ECR_REPO_URL}:${{ env.RELEASE_VERSION }}-${{ github.sha }}" "${GHCR_REPO_URL}:${{ env.RELEASE_VERSION }}-${{ github.sha }}"
          docker push "${GHCR_REPO_URL}:${{ env.RELEASE_VERSION }}-${{ github.sha }}"

          # Tag and push as {env}-latest
          docker tag "${GHCR_REPO_URL}:${{ env.RELEASE_VERSION }}-${{ github.sha }}" "${GHCR_REPO_URL}:${{ env.RELEASE_VERSION }}-latest"
          docker push "${GHCR_REPO_URL}:${{ env.RELEASE_VERSION }}-latest"
      # this simply changes docker container tag for K8S service
      - name: Deploy pushed docker tag to infrastructure
        id: deploy-docker
        if: github.event_name != 'pull_request'
        run: ./_ci/scripts/deploy-docker-image.sh "${{ env.AWS_ENVIRONMENT }}" "${{ env.RELEASE_VERSION }}-${{ github.sha }}"
        shell: bash
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.INFRA_DEPLOYER_GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.INFRA_DEPLOYER_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.INFRA_DEPLOYER_AWS_SECRET_ACCESS_KEY }}

