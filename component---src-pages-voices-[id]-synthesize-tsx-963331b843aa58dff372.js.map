{"version":3,"sources":["webpack:///./src/layouts/Voices/components/WaitForSampleGeneration.tsx","webpack:///./src/layouts/Voices/components/Synthesize.tsx","webpack:///./src/pages/voices//synthesize.tsx"],"names":["SAMPLE","gql","WaitForSampleGeneration","loading","sample","children","useQuery","variables","id","fetchPolicy","skip","audio_url","data","startPolling","stopPolling","smpl","useEffect","VOICE","CREATE_SAMPLE","SpeedControl","connect","props","focusVisibleRef","theme","parentTheme","space","base","colors","primaryHue","onClick","formik","setFieldValue","name","as","Range","min","max","PlayerBar","styled","div","Synthesize","locationState","voiceLoading","voice","error","useMutation","update","cache","result","createSample","voice_id","evict","fieldName","args","createSampleStatus","to","ArrowLeft","size","initialValues","text","speed","formValues","validate","values","errors","forEach","k","slice","onSubmit","0","1","2","catch","VoicesDropdown","value","onSelect","navigate","state","style","marginTop","fontWeight","backgroundColor","label","maxCharCount","Textarea","height","fieldStyle","minHeight","Input","validation","message","src","process","SynthesizePage","location","consentedToGoogleAnalytics","Root","hasSkipNav","showVoiceSearch","SEO","RequireAuth"],"mappings":"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","file":"component---src-pages-voices-[id]-synthesize-tsx-963331b843aa58dff372.js","sourcesContent":["/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Loading } from 'layouts/Root/components/Styled';\n\nconst SAMPLE = gql`\n  query Sample($id: String!) {\n    sample(id: $id) {\n      id\n      audio_url\n    }\n  }\n`;\n\nexport const WaitForSampleGeneration = ({ loading, sample, children }) => {\n  const { data, startPolling, stopPolling } = useQuery(SAMPLE, {\n    variables: {\n      id: sample.id\n    },\n    fetchPolicy: 'network-only',\n    skip: !!sample.audio_url\n  });\n\n  const smpl = sample.audio_url ? sample : data?.sample;\n\n  useEffect(() => {\n    if (smpl?.audio_url) {\n      stopPolling();\n    } else {\n      startPolling(10000);\n    }\n  });\n\n  if (smpl?.audio_url) {\n    return children(smpl);\n  }\n\n  return loading || <Loading />;\n};\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { Form, Formik, connect, Field as FormikField } from 'formik';\nimport * as GardenForms from '@zendeskgarden/react-forms';\nimport styled, { DefaultTheme, css } from 'styled-components';\nimport { ThemeProvider } from '@zendeskgarden/react-theming';\n\nimport { VoicesDropdown } from 'layouts/Root/components/VoicesDropdown';\nimport { Field, MaxCharCountField, Submit } from 'layouts/Root/components/Forms';\nimport { CenterContent, Loading, TitleBar } from 'layouts/Root/components/Styled';\nimport { navigate } from 'gatsby';\nimport { Link } from 'layouts/Root/components/StyledNavigationLink';\nimport { ArrowLeft } from 'iconsax-react';\nimport { Input, Textarea, Range, Message } from '@zendeskgarden/react-forms';\nimport { Well } from '@zendeskgarden/react-notifications';\nimport { AudioPlayer } from './MediaPlayers';\nimport { WaitForSampleGeneration } from './WaitForSampleGeneration';\n\nconst VOICE = gql`\n  query voice($id: String!) {\n    voice(id: $id) {\n      id\n      name\n    }\n  }\n`;\n\nconst CREATE_SAMPLE = gql`\n  mutation createSample($name: String!, $voice_id: String!, $text: String!, $speed: String!) {\n    createSample(name: $name, voice_id: $voice_id, text: $text, speed: $speed) {\n      errors {\n        field\n        errors\n      }\n      sample {\n        id\n        name\n        created_at\n        voice_id\n        audio_url\n      }\n    }\n  }\n`;\n\nconst SpeedControl = connect(props => {\n  const theme = (parentTheme: DefaultTheme) => ({\n    ...parentTheme,\n    space: { ...parentTheme.space, base: 3 },\n    colors: { ...parentTheme.colors, primaryHue: '#ed8f1c' }\n  });\n\n  return (\n    <ThemeProvider focusVisibleRef={null} theme={theme as any}>\n      <GardenForms.Field>\n        <GardenForms.Label\n          css={`\n            font-weight: 400;\n          `}\n        >\n          Speed\n        </GardenForms.Label>\n        <Well\n          css={css`\n            height: 103px;\n            padding: 0;\n            color: #313940;\n            border-color: #186146;\n            overflow: hidden;\n            margin-bottom: 30px;\n          `}\n        >\n          <div\n            css={css`\n              background-color: rgba(24, 97, 70, 0.1);\n              height: 44px;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              margin: 0 -30px;\n\n              & div {\n                flex-grow: 1;\n                width: 33%;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n              }\n            `}\n          >\n            <div onClick={() => props.formik.setFieldValue('speed', 0)}>Slower</div>\n            <div onClick={() => props.formik.setFieldValue('speed', 1)}>Normal</div>\n            <div onClick={() => props.formik.setFieldValue('speed', 2)}>Faster</div>\n          </div>\n          <div\n            css={css`\n              height: 5px;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              margin: -2.5px 90px;\n\n              & div {\n                flex-grow: 1;\n                height: 5px;\n                width: 33%;\n                margin-left: -1px;\n                border-left: 1px #186146 solid;\n                border-right: 1px #186146 solid;\n              }\n            `}\n          >\n            <div>&nbsp;</div>\n            <div>&nbsp;</div>\n          </div>\n          <div\n            css={css`\n              padding: 20px 83px;\n            `}\n          >\n            <FormikField name=\"speed\" id=\"speed\" as={Range} min={0} max={2} />\n          </div>\n        </Well>\n      </GardenForms.Field>\n    </ThemeProvider>\n  );\n});\n\nconst PlayerBar = styled.div`\n  height: 84px;\n  background-color: #f8f8f8;\n  display: flex;\n  align-items: center;\n`;\n\nexport const Synthesize: React.FC = ({ locationState = null, id }) => {\n  const { data, loading: voiceLoading, error } = useQuery(VOICE, { variables: { id } });\n\n  const voice = data?.voice;\n\n  const [createSample, createSampleStatus] = useMutation(CREATE_SAMPLE, {\n    update: (cache, result) => {\n      if (result?.data?.createSample?.sample?.voice_id) {\n        cache.evict({\n          id: 'ROOT_QUERY',\n          fieldName: 'samples',\n          args: { voice_id: result.data.createSample.sample.voice_id }\n        });\n        cache.evict({\n          id: 'ROOT_QUERY',\n          fieldName: 'voices'\n        });\n      }\n    }\n  });\n\n  const sample = createSampleStatus?.data?.createSample?.sample;\n\n  if (voiceLoading) return <Loading />;\n\n  return (\n    <>\n      <TitleBar>\n        <Link to=\"/voices\" css=\"vertical-align: middle; margin-right: 8px;\">\n          <ArrowLeft size={24} />\n        </Link>\n        Synthesize Voice\n      </TitleBar>\n\n      <CenterContent>\n        <Formik\n          initialValues={{\n            name: '',\n            text: '',\n            speed: '1',\n            ...locationState?.formValues\n          }}\n          validate={values => {\n            const errors = {};\n\n            ['text'].forEach(k => {\n              if (!values[k]) errors[k] = 'Required.';\n            });\n\n            if (!values['name'] && values['text']) {\n              values['name'] = values['text'].slice(0, 30);\n            }\n\n            return errors;\n          }}\n          onSubmit={values => {\n            createSample({\n              variables: {\n                ...values,\n                speed: { 0: '1.5', 1: '1', 2: '0.7' }[values.speed],\n                voice_id: voice.id\n              }\n            }).catch(() => {});\n          }}\n        >\n          {({ values }) => (\n            <Form>\n              <GardenForms.Field\n                css={`\n                  min-height: 106px;\n                `}\n              >\n                <GardenForms.Label\n                  css={`\n                    font-weight: 400;\n                  `}\n                >\n                  Select Voice\n                </GardenForms.Label>\n\n                <VoicesDropdown\n                  value={voice}\n                  onSelect={voice => {\n                    navigate(`/voices/${voice.id}/synthesize`, { state: { formValues: values } });\n                  }}\n                  style={{\n                    marginTop: 9,\n                    fontWeight: 700,\n                    backgroundColor: '#F2F4F5'\n                  }}\n                />\n              </GardenForms.Field>\n\n              <MaxCharCountField\n                name=\"text\"\n                label=\"Input your text here\"\n                maxCharCount={250}\n                as={Textarea}\n                style={{ height: 120 }}\n                fieldStyle={{ minHeight: 190 }}\n              />\n\n              <SpeedControl />\n\n              <Field name=\"name\" label=\"Name your audio\" as={Input} />\n\n              {createSampleStatus.error && (\n                <Message validation=\"error\">{createSampleStatus.error.message}</Message>\n              )}\n\n              <Submit loading={createSampleStatus.loading}>Submit</Submit>\n            </Form>\n          )}\n        </Formik>\n      </CenterContent>\n      {sample && (\n        <WaitForSampleGeneration sample={sample}>\n          {sample => (\n            <PlayerBar>\n              <CenterContent>\n                <AudioPlayer\n                  src={\n                    sample.audio_url[0] === '/'\n                      ? `${process.env.GATSBY_BACKEND_URL}${sample.audio_url}`\n                      : sample.audio_url\n                  }\n                />\n              </CenterContent>\n            </PlayerBar>\n          )}\n        </WaitForSampleGeneration>\n      )}\n    </>\n  );\n};\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useEffect } from 'react';\n// import navs from '../nav/blog';\nimport SEO from 'components/SEO';\nimport RootLayout from 'layouts/Root';\n// import { graphql, useStaticQuery } from 'gatsby';\nimport GogleAnalyticsCookieConsent from 'components/Cookies';\nimport { consentedToGoogleAnalytics } from 'utils/GoogleAnalytics';\nimport RequireAuth from 'layouts/Auth/components/RequireAuth';\nimport { Synthesize } from 'layouts/Voices/components/Synthesize';\n\nconst SynthesizePage: React.FC = ({ location, id }) => {\n  useEffect(() => {\n    consentedToGoogleAnalytics();\n  });\n\n  return (\n    <RootLayout hasSkipNav={false} showVoiceSearch={true}>\n      <SEO />\n      <RequireAuth>\n        <Synthesize locationState={location.state} id={id} />\n      </RequireAuth>\n\n      <GogleAnalyticsCookieConsent />\n    </RootLayout>\n  );\n};\n\nexport default SynthesizePage;\n"],"sourceRoot":""}