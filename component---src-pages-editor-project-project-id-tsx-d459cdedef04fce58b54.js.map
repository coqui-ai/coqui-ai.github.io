{"version":3,"sources":["webpack:///./src/layouts/Editor/ProjectLayout.tsx","webpack:///./src/pages/editor/project/[project_id].tsx","webpack:///./src/layouts/Editor/components/Mutations.tsx","webpack:///./src/layouts/Editor/components/RequireEditorAccess.tsx","webpack:///./src/layouts/Editor/components/ClientSide.tsx","webpack:///./src/layouts/Editor/components/Queries.tsx"],"names":["ProjectLayout","projectId","useQuery","queries","variables","project_id","scenes","data","loading","useMutation","mutations","update","cache","evict","id","fieldName","createScene","createDefaultScene","createdScene","creating","error","a","name","description","scene","navigate","useEffect","length","ClientSide","RequireEditorAccess","ProjectPage","Root","hasSkipNav","CREATE_PROJECT","gql","CREATE_SCENE","CREATE_LINE","CREATE_TAKE","DELETE_LINE","children","useProfile","profile","can_access_editor","useState","isClient","setIsClient","PROJECTS","PROJECT","SCENES","SCENE","LINES","EMOTIONS","SPEAKERS"],"mappings":"+PA6DeA,EA9CO,SAAC,GAAgB,IAAfC,EAAe,EAAfA,UACtB,EAAkCC,YAASC,IAAgB,CAAEC,UAAW,CAAEC,WAAYJ,KAAxEK,EAAd,EAAQC,KACR,GADA,EAAsBC,QACmCC,YAAYC,IAAwB,CAC3FC,OAAQ,SAAAC,GACNA,EAAMC,MAAM,CACVC,GAAI,aACJC,UAAW,eAJVC,EAAP,YASMC,GATN,EAAsBC,aAAtB,EAAoCC,SAApC,EAA8CC,MAStB,uCAAG,oCAAAC,EAAA,sEACLL,EAAY,CAC9BZ,UAAW,CACTC,WAAYJ,EACZqB,KAAM,UACNC,YAAa,MALQ,OASrBC,OAREA,EADmB,SASzB,UAAIA,EAAOR,mBAAX,iBAAI,EAAoBQ,aAAxB,OAAI,EAA2BV,IAC7BW,YAAS,mBAAmBxB,EAApB,WAAuCuB,SAAvC,UAAuCA,EAAOR,mBAA9C,iBAAuC,EAAoBQ,aAA3D,aAAuC,EAA2BV,IAAlE,KAVe,2CAAH,sDA0BxB,OAZAY,qBAAU,WAAM,MACTpB,IAGD,UAACA,EAAOA,cAAR,OAAC,EAAeqB,OAIlBF,YAAS,mBAAmBxB,EAApB,UAAuCK,EAAOA,OAAO,GAAGQ,GAAxD,KAHRG,OAKD,CAACX,IAGF,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gBACW5B,K,YClCF6B,UATK,SAAC,GAAiB,IAAhBzB,EAAgB,EAAhBA,WACpB,OACE,kBAAC0B,EAAA,EAAD,CAAYC,YAAY,GACtB,kBAAC,EAAD,CAAe/B,UAAWI,IAC1B,kBAAC,IAAD,S,oPCPO4B,EAAiBC,YAAH,6TAiBdC,EAAeD,YAAH,sWAiBZE,EAAcF,YAAH,gcAeXG,EAAcH,YAAH,4cAgBXI,EAAcJ,YAAH,uJ,oCC1ExB,iDAiCeL,IAtBa,SAAC,GAAiB,IAAfU,EAAe,EAAfA,SAC7B,EAA0CC,cAA5BC,EAAd,EAAQlC,KAAR,EAAuBC,QAEvB,OAFA,EAAgCY,MAGvB,QAGJqB,EAIAA,EAAQC,kBAKX,kBAAC,IAAD,KACGH,GALI,cAJA,e,iPCSIX,IAnBI,SAAC,GAAiB,IAAfW,EAAe,EAAfA,SACpB,EAAgCI,oBAAkB,GAA3CC,EAAP,KAAiBC,EAAjB,KAMA,OAJAnB,qBAAU,WACRmB,GAAY,KACX,IAGD,0BAGeD,EAAW,MAAQ,OAG/BL,K,0TCdMO,EAAWZ,YAAH,oGASRa,EAAUb,YAAH,4KAWPc,EAASd,YAAH,kLAWNe,EAAQf,YAAH,oKAWLgB,EAAQhB,YAAH,iZA0BLiB,EAAWjB,YAAH,mEAORkB,EAAWlB,YAAH","file":"component---src-pages-editor-project-project-id-tsx-d459cdedef04fce58b54.js","sourcesContent":["/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { navigate } from 'gatsby';\nimport RequireEditorAccess from './components/RequireEditorAccess';\nimport ClientSide from './components/ClientSide';\nimport * as mutations from './components/Mutations';\nimport * as queries from './components/Queries';\n\nconst ProjectLayout = ({projectId}) => {\n  const { data: scenes, loading } = useQuery(queries.SCENES, { variables: { project_id: projectId } });\n  const [createScene, { createdScene, creating, error }] = useMutation(mutations.CREATE_SCENE, {\n    update: cache => {\n      cache.evict({\n        id: 'ROOT_QUERY',\n        fieldName: 'scenes'\n      });\n    }\n  });\n\n  const createDefaultScene = async () => {\n    const scene = await createScene({\n      variables: {\n        project_id: projectId,\n        name: \"Scene 1\",\n        description: \"\",\n      }\n    });\n    // Default scene created, navigate to it\n    if (scene?.createScene?.scene?.id) {\n      navigate(`/editor/project/${projectId}/scene/${scene?.createScene?.scene?.id}/`);\n    }\n  }\n\n  useEffect(() => {\n    if (!scenes) {\n      return;\n    }\n    if (!scenes.scenes?.length) {\n      createDefaultScene();\n    } else {\n      // Go to first scene\n      navigate(`/editor/project/${projectId}/scene/${scenes.scenes[0].id}/`);\n    }\n  }, [scenes]);\n\n  return (\n    <ClientSide>\n      <RequireEditorAccess>\n        Project {projectId}\n      </RequireEditorAccess>\n    </ClientSide>\n  );\n};\n\nexport default ProjectLayout;\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport RootLayout from 'layouts/Root';\nimport ProjectLayout from 'layouts/Editor/ProjectLayout';\nimport GogleAnalyticsCookieConsent from 'components/Cookies';\n\nconst ProjectPage = ({project_id}) => {\n  return (\n    <RootLayout hasSkipNav={false}>\n      <ProjectLayout projectId={project_id}/>\n      <GogleAnalyticsCookieConsent/>\n    </RootLayout>\n  );\n};\n\nexport default ProjectPage;\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport { gql } from '@apollo/client';\n\nexport const CREATE_PROJECT = gql`\n  mutation createProject($name: String!, $description: String!) {\n    createProject(name: $name, description: $description) {\n      errors {\n        field\n        errors\n      }\n      project {\n        id\n        name\n        description\n        created_at\n      }\n    }\n  }\n`;\n\nexport const CREATE_SCENE = gql`\n  mutation createScene($project_id: String!, $name: String!, $description: String!) {\n    createScene(project_id: $project_id, name: $name, description: $description) {\n      errors {\n        field\n        errors\n      }\n      scene {\n        id\n        name\n        description\n        created_at\n      }\n    }\n  }\n`;\n\nexport const CREATE_LINE = gql`\n  mutation createLine($scene_id: String!, $text: String!, $speaker_id: String!, $emotion_id: String!, $speed: Float!, $emotion_intensity: Float!) {\n    createLine(scene_id: $scene_id, text: $text, speaker_id: $speaker_id, emotion_id: $emotion_id, speed: $speed, emotion_intensity: $emotion_intensity) {\n      line {\n        id\n      }\n      take {\n        id\n        text\n        audio_url\n      }\n    }\n  }\n`;\n\nexport const CREATE_TAKE = gql`\n  mutation createTake($line_id: String!, $text: String!, $speaker_id: String!, $emotion_id: String!, $speed: Float!, $emotion_intensity: Float!) {\n    createTake(line_id: $line_id, text: $text, speaker_id: $speaker_id, emotion_id: $emotion_id, speed: $speed, emotion_intensity: $emotion_intensity) {\n      line {\n        id\n      }\n      take {\n        id\n        text\n        saved\n        audio_url\n      }\n    }\n  }\n`;\n\nexport const DELETE_LINE = gql`\n  mutation deleteLine($line_id: String!) {\n    deleteLine(line_id: $line_id) {\n      success\n      errors\n    }\n  }\n`;\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { useProfile } from 'utils/auth';\nimport RequireAuth from 'layouts/Auth/components/RequireAuth';\n\nconst RequireEditorAccess = ({ children }) => {\n  const { data: profile, loading, error } = useProfile();\n\n  if (error) {\n    return 'error';\n  }\n\n  if (!profile) {\n    return 'no profile';\n  }\n\n  if (!profile.can_access_editor) {\n    return 'not allowed';\n  }\n\n  return (\n    <RequireAuth>\n      {children}\n    </RequireAuth>\n  );\n};\n\nexport default RequireEditorAccess;\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useEffect } from 'react';\n\nconst ClientSide = ({ children }) => {\n  const [isClient, setIsClient] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return (\n    <div\n      css={css`\n        transition: opacity 100ms;\n        opacity: ${isClient ? '1.0' : '0.0'};\n      `}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default ClientSide;\n","/**\n * Copyright Coqui GmbH\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport { gql } from '@apollo/client';\n\nexport const PROJECTS = gql`{\n  projects {\n    id\n    name\n    description\n    created_at\n  }\n}`;\n\nexport const PROJECT = gql`\n  query project($project_id: String!) {\n    project(id: $project_id) {\n      id\n      name\n      description\n      created_at\n    }\n  }\n`;\n\nexport const SCENES = gql`\n  query scenes($project_id: String!) {\n    scenes(project_id: $project_id) {\n      id\n      name\n      description\n      created_at\n    }\n  }\n`;\n\nexport const SCENE = gql`\n  query scene($scene_id: String!) {\n    scene(id: $scene_id) {\n      id\n      name\n      description\n      created_at\n    }\n  }\n`;\n\nexport const LINES = gql`\n  query lines($scene_id: String!) {\n    lines(scene_id: $scene_id) {\n      id\n      last_render {\n        text\n        speaker {\n          id\n          name\n        }\n        emotion {\n          id\n          name\n        }\n        emotion_intensity\n        speed\n        audio_url\n      }\n      takes {\n        id\n        audio_url\n      }\n    }\n  }\n`;\n\nexport const EMOTIONS = gql`{\n  emotions {\n    id\n    name\n  }\n}`;\n\nexport const SPEAKERS = gql`{\n  speakers {\n    id\n    name\n  }\n}`;\n"],"sourceRoot":""}